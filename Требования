### Функциональные требования

- **Типизация:**
  - Язык является **строго и статически типизированным**.
  - Типы переменных и аргументов функций должны быть известны на этапе компиляции.
  - Неявное преобразование типов **запрещено**.
  - Разрешены только явные преобразования с помощью встроенных функций (например, `to_int()`, `to_float()` — планируются на будущее).

- **Переменные:**
  - Переменные должны быть **объявлены до использования**.
  - Присваивание возможно только при совпадении типов.
  - Каждая переменная имеет **область видимости**:
    - **Глобальная:** объявлена вне функции.
    - **Локальная:** объявлена внутри функции или блока `{}`.

  ```text
  var int x = 10;
  var float y = 2.5;


- **Функции:**
  - Функции определяются ключевым словом func.
  - Тип возвращаемого значения указывается перед именем функции.
  - Аргументы функции объявляются с типами.
  - Если функция не возвращает значения, тип можно указать как void.
  - Возврат значения осуществляется оператором return.

  ```text
  func int add(int a, int b) {
      return a + b;
  }

Операции:

Арифметические операции (+, -, *, /, %) применимы только к числовым типам (int, float).

Логические операции (&&, ||, !) применимы только к bool.

Операции сравнения (==, !=, <, >, <=, >=) возвращают значение типа bool.

Конкатенация строк выполняется через оператор +, если оба операнда string.


Условные конструкции:

if требует выражение типа bool.

else опционален и должен следовать сразу после блока if.

Вложенные условия разрешены.

if (x > 0) {
    print("positive");
} else {
    print("non-positive");
}

Циклы:

Поддерживаются два типа циклов:

for с тремя выражениями: for (init; condition; update) { ... }

while-подобный цикл: for (condition) { ... }

Циклы могут использовать операторы break и continue.


for (var int i = 0; i < 10; i = i + 1) {
    print(i);
}


Массивы:

Тип массива указывается как array<type>.

Индексация начинается с нуля.

Доступ к элементу осуществляется через [].


var array<int> nums = [1, 2, 3];
print(nums[0]); // вывод: 1


Возврат управления:

return завершает выполнение функции и возвращает значение.

Отсутствие return в функции с ненулевым типом — ошибка компиляции.


Нефункциональные требования

Безопасность типов:
Все операции проверяются на совместимость типов на этапе компиляции.
Ошибки несоответствия типов должны вызывать сообщение:

TypeError: cannot assign float to int at line 7



Ошибки выполнения:
Ошибки времени выполнения (например, выход за границы массива, деление на ноль) должны корректно обрабатываться с выводом:

RuntimeError: division by zero at line 12
